#!/bin/bash
#
# sd-autocopy - Copies/Moves images automatically from inserted media
#
# Copyright (c) 2011 Lars Michelsen <lm@larsmichelsen.com>
# Copyright (c) 2018 Christian Strassburg <c.strassburg@gmx.de>
#
# License:
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

LOGFILE=/var/log/sd-autocopy
touch $LOGFILE
echo ======================== >> $LOGFILE

# For testing, change it to: [ 1 == 1 ]
if [ 0 == 1 ]; then
   env >> $LOGFILE
   exit 0
fi

# Put this in curly braces and detach the whole block to background
# for not blocking udev during copying.
{
    USER=root
    TARGET=/file/location/here
    MOUNT=/mnt/sd-autocopy
    FILE_MATCH=".*\.(jpg|cr2|dng|tiff|jpeg|pdf|mkv|avi|mp4|3gp|mpg|mov|mpeg|wma|wmv|vob|mts)$"
    NEXTCLOUD_ENABLED=true
    DOCKER_ENABLED=true
    DOCKER_CONTAINER_NAME=nextcloud
    NEXTCLOUD_FILE_LOCATION=/var/www/html/data/user/files/directory/here

    # Catch unset but needed vars - terminate script
    if [ -z "$DEVNAME" ]; then
        echo "Missing env var DEVNAME" >> $LOGFILE
        exit 1
    fi

    if [ "$DEVNAME" = "/dev/synoboot1" ] || [ "$DEVNAME" = "/dev/sda1" ] || [ "$DEVNAME" = "/dev/sdb1" ]; then
        echo "Got a blacklisted drive ($DEVNAME), skipping" >> $LOGFILE
        exit 1
    fi

    echo "Got new device ($DEVNAME), moving images..." >> $LOGFILE

    # Beep to know device detected
#    echo 2 >/dev/ttyS1

    if [ ! -d "$MOUNT" ]; then
        echo "Making Mount point..." >> $LOGFILE
        mkdir -p "$MOUNT"
    fi
    echo "Mounting Storage..." >> $LOGFILE
    mount $DEVNAME "$MOUNT" >> $LOGFILE

    LINES=$(find "$MOUNT" -regextype posix-egrep -iregex "$FILE_MATCH" -printf "%TY.%Tm.%Td_%p\n")
    DATES=$(echo "$LINES" | cut -d_ -f1 | uniq)

    # First create the directories when missing
    for DATE in $DATES; do
        echo "Making date folder for $DATE" >> $LOGFILE
        echo $DATE
        mkdir -p "$TARGET/$DATE"
    done

    # Move the images
    NUM=0
    for LINE in $LINES; do
        DATE=${LINE%%_*}
        FILE=${LINE#*_}
        echo "Moving $FILE to $TARGET/$DATE" >> $LOGFILE

        # Try 5 times to copy each file (rsync seems flaky at best)
        for i in {0..4}; do
            rsync -avh --progress --remove-source-files "$FILE" "$TARGET/$DATE"

            # If the orignal is gone, things succeeded and break out of loop
            if [ ! -f "$FILE" ]; then
                echo "Sucessfully copied $FILE to $TARGET/$DATE"
                break
            fi
        done

        if [ -f "$FILE" ]; then
            echo "$FILE was not copied, something went wrong"
        fi

        NUM=$(($NUM+1))
    done

    umount $DEVNAME

    # Fix the permissions for all directories recursive where
    # files have been copied/moved to
    for DATE in $DATES; do
        chown -R $USER.$USER "$TARGET/$DATE"
    done

    # delete all empty directories on SD card
    # find "$MOUNT" -type d -empty -delete

    # Nextcloud+(docker) sync
    if [ $NEXTCLOUD_ENABLED == true ]; then
        echo "Nextcloud enabled. Checking if docker support is enabled." >> $LOGFILE
        
        if [ $DOCKER_ENABLED == true ]; then
            echo "Docker enabled. Executing docker version Nextcloud filesync." >> $LOGFILE
            docker exec -t -u 33 $DOCKER_CONTAINER_NAME php occ files:scan --path="$NEXTCLOUD_FILE_LOCATION" >> $LOGFILE
        fi    
    
        if [ $DOCKER_ENABLED == false ]; then
            echo "Docker disabled. Executing Nextcloud filesync." >> $LOGFILE
            php occ files:scan $NEXTCLOUD_USER >> $LOGFILE
        fi
        echo "Filescan complete!" >> $LOGIFLE 
    fi

    echo "Finished job. Moved $NUM files." >> $LOGFILE

    # Wait a moment so if nothing copied we know what is going on with the beeps
    sleep 1

    # Beep so we know we are all set
    echo 2 >/dev/ttyS1
    sleep 0.1
    echo 2 >/dev/ttyS1
} &

exit 0
